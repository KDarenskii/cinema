{"version":3,"file":"static/js/Movies.998bf39e.chunk.js","mappings":"yUAuGA,EAtF6B,WACzB,MAAkCA,EAAAA,UAAe,GAAM,eAAhDC,EAAS,KAAEC,EAAY,KAC9B,EAA0BF,EAAAA,SAA8B,MAAK,eAAtDG,EAAK,KAAEC,EAAQ,KACtB,EAAwBJ,EAAAA,SAA2B,IAAG,eAA/CK,EAAI,KAAEC,EAAO,KAEpB,EAAwBN,EAAAA,SAAe,GAAE,eAAlCO,EAAI,KAAEC,EAAO,KACpB,EAAoCR,EAAAA,SAAe,GAAE,eAA9CS,EAAU,KAAEC,EAAa,KAEhC,GAAuBC,EAAAA,EAAAA,MAAhBC,GAAiC,YAArB,GACbC,EAAcD,EAAaE,WAAWC,OAAS,EAErDf,EAAAA,WAAgB,WACZQ,EAAQ,GACRF,EAAQ,GACZ,GAAG,CAACM,IAEJ,IAAMI,EAAchB,EAAAA,YAAiB,yCACjC,WAAOO,GAAY,gFAEI,OADnBH,EAAS,MACTF,GAAa,GAAM,kBAEQe,EAAAA,EAAAA,cAA6B,CAChDC,OAAQ,CACJC,KAAMC,EAAAA,EAAAA,MACNC,EAAGT,EAAaU,IAAI,KACpBC,MAAOhB,EACPiB,OAAQ,MAEb,KAAD,EAPIC,EAAQ,OAQdf,EAAcgB,OAAOD,EAASE,QAAQ,mBACtCrB,GAAQ,SAACsB,GAAI,wBAASA,IAAI,OAAKH,EAASI,MAAI,IAAG,kDAEzCC,EAAG,KACT1B,EAAoB,QAAZ,EAAC0B,EAAIC,eAAO,QAAI,MAAM,QAEV,OAFU,UAE9B7B,GAAa,GAAO,6EAE3B,mDArBgC,GAsBjC,CAACU,IAOL,OAJAZ,EAAAA,WAAgB,WACZgB,EAAYT,EAChB,GAAG,CAACS,EAAaJ,EAAcL,KAG3B,iBAAKyB,UAAU,cAAa,WACxB,SAACC,EAAA,EAAM,CAACD,UAAU,yBAClB,qBAASA,UAAU,oBAAmB,WAClC,SAACE,EAAA,EAAY,CACTF,UAAU,qBACVG,KACItB,EAAW,gBACKZ,EAA0B,GAAdI,EAAKU,OAAW,yBAAiBH,EAAaU,IAAI,KAAI,KAC5E,YAGZnB,IACE,SAAC,IAAc,CACXiC,KAAM,kBAAM5B,GAAQ,SAACoB,GAAI,OAAKA,EAAO,CAAC,GAAC,EACvCS,WAAYhC,EAAKU,OACjBuB,QAASjC,EAAKU,OAASN,EACvB8B,QAAQ,SAACC,EAAA,EAAY,IACrBR,UAAU,sBACVS,MAAO,CAAEC,SAAU,WACnBC,YACI,SAACC,EAAA,EAAc,CACXZ,UAAU,4BACVD,QAAQ,6CAEf,UAED,UAACc,EAAA,EAAe,WACXxC,EAAKyC,KAAI,SAACC,GAAO,OACd,SAACC,EAAA,EAAO,CAAkBD,QAASA,GAArBA,EAAQE,GAAwB,IAEjDhD,IAAa,OAAI,IAAIiD,MAAM,KAAKJ,KAAI,SAACK,EAAMC,GAAK,OAAK,SAACC,EAAA,EAAa,GAAMD,EAAS,SAI9FjD,IAAS,SAACmD,EAAA,EAAU,CAACvB,QAAS5B,EAAOoD,QAAS,kBAAMvC,EAAYT,EAAK,SAItF,C","sources":["pages/MoviesPage/index.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport Preview from \"../../components/Preview\";\r\nimport PreviewLoader from \"../../components/Preview/PreviewLoader\";\r\nimport PreviewsWrapper from \"../../components/PreviewsWrapper\";\r\nimport RetryError from \"../../components/RetryError\";\r\nimport Search from \"../../components/Search\";\r\nimport SectionTitle from \"../../components/SectionTitle\";\r\nimport { CINEMA_TYPE } from \"../../constants/cinemaType\";\r\nimport InfiniteScroll from \"react-infinite-scroll-component\";\r\nimport EndListMessage from \"../../components/EndListMessage\";\r\nimport CircleLoader from \"../../components/CircleLoader\";\r\nimport { ITrailer } from \"../../models/cinema\";\r\nimport TrailerService from \"../../services/TrailerService\";\r\n\r\nimport \"./styles.scss\";\r\n\r\nconst MoviesPage: React.FC = () => {\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const [error, setError] = React.useState<string | null>(null);\r\n    const [list, setList] = React.useState<ITrailer[]>([]);\r\n\r\n    const [page, setPage] = React.useState(1);\r\n    const [totalCount, setTotalCount] = React.useState(0);\r\n\r\n    const [searchParams] = useSearchParams();\r\n    const isSearching = searchParams.toString().length > 0;\r\n\r\n    React.useEffect(() => {\r\n        setPage(1);\r\n        setList([]);\r\n    }, [searchParams]);\r\n\r\n    const fetchMovies = React.useCallback(\r\n        async (page: number) => {\r\n            setError(null);\r\n            setIsLoading(true);\r\n            try {\r\n                const response = await TrailerService.fetchTrailers({\r\n                    params: {\r\n                        type: CINEMA_TYPE.MOVIE,\r\n                        q: searchParams.get(\"q\"),\r\n                        _page: page,\r\n                        _limit: 12,\r\n                    },\r\n                });\r\n                setTotalCount(Number(response.headers[\"x-total-count\"]));\r\n                setList((prev) => [...prev, ...response.data]);\r\n            } catch (error) {\r\n                const err = error as any;\r\n                setError(err.message ?? null);\r\n            } finally {\r\n                setIsLoading(false);\r\n            }\r\n        },\r\n        [searchParams]\r\n    );\r\n\r\n    React.useEffect(() => {\r\n        fetchMovies(page);\r\n    }, [fetchMovies, searchParams, page]);\r\n\r\n    return (\r\n        <div className=\"movies-page\">\r\n            <Search className=\"movies-page__search\" />\r\n            <section className=\"movies-page__list\">\r\n                <SectionTitle\r\n                    className=\"movies-page__title\"\r\n                    text={\r\n                        isSearching\r\n                            ? `Found ${!isLoading ? list.length : \"\"} results for '${searchParams.get(\"q\")}'`\r\n                            : \"Movies\"\r\n                    }\r\n                />\r\n                {!error && (\r\n                    <InfiniteScroll\r\n                        next={() => setPage((prev) => prev + 1)}\r\n                        dataLength={list.length}\r\n                        hasMore={list.length < totalCount}\r\n                        loader={<CircleLoader />}\r\n                        className=\"movies-page__scroll\"\r\n                        style={{ overflow: \"initial\" }}\r\n                        endMessage={\r\n                            <EndListMessage\r\n                                className=\"movies-page__list-message\"\r\n                                message=\"There is no more content to show you ^_^\"\r\n                            />\r\n                        }\r\n                    >\r\n                        <PreviewsWrapper>\r\n                            {list.map((preview) => (\r\n                                <Preview key={preview.id} preview={preview} />\r\n                            ))}\r\n                            {isLoading && [...new Array(12)].map((item, index) => <PreviewLoader key={index} />)}\r\n                        </PreviewsWrapper>\r\n                    </InfiniteScroll>\r\n                )}\r\n                {error && <RetryError message={error} onClick={() => fetchMovies(page)} />}\r\n            </section>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MoviesPage;"],"names":["React","isLoading","setIsLoading","error","setError","list","setList","page","setPage","totalCount","setTotalCount","useSearchParams","searchParams","isSearching","toString","length","fetchMovies","TrailerService","params","type","CINEMA_TYPE","q","get","_page","_limit","response","Number","headers","prev","data","err","message","className","Search","SectionTitle","text","next","dataLength","hasMore","loader","CircleLoader","style","overflow","endMessage","EndListMessage","PreviewsWrapper","map","preview","Preview","id","Array","item","index","PreviewLoader","RetryError","onClick"],"sourceRoot":""}